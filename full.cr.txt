====================
FILE: FlywayConfig.java

package com.jakubbone.config;

import org.springframework.boot.autoconfigure.flyway.FlywayMigrationStrategy;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;

/**
 * Flyway migration strategy that cleans the schema before migrating.
 * Usage:
 *   - Enable only in development by activating the "dev" profile via application.properties:
 *       spring.profiles.active=dev
 *   - Or programmatically in your main application:
 *       SpringApplication app = new SpringApplication(SpringBootMailingApplication.class);
 *       app.setAdditionalProfiles("dev");
 *       app.run(args);
 *
 * WARNING: This will delete all data! Use only in dev.
 */

@Configuration
@Profile("dev") // only for development
public class FlywayConfig {
    @Bean
    public FlywayMigrationStrategy cleanMigrateStrategy() {
        return flyway -> {
            flyway.clean();    // delete entire schema and history
            flyway.migrate();  // start V1, V2â€¦
        };
    }
}

====================
FILE: KeycloakConfig.java

package com.jakubbone.config;

import org.keycloak.OAuth2Constants;
import org.keycloak.admin.client.Keycloak;
import org.keycloak.admin.client.KeycloakBuilder;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class KeycloakConfig {
    @Value("${keycloak.base-url}")
    private String keycloakBaseUrl;

    @Value("${keycloak.realm}")
    private String keycloakRealm;

    @Value("${keycloak.admin-client-id}")
    private String adminClientId;

    @Value("${keycloak.admin-client-secret}")
    private String adminClientSecret;

    @Bean
    public Keycloak keycloak() {
        return KeycloakBuilder.builder()
                .serverUrl(keycloakBaseUrl)
                .realm(keycloakRealm)
                .clientId(adminClientId)
                .clientSecret(adminClientSecret)
                .grantType(OAuth2Constants.CLIENT_CREDENTIALS)
                .build();
    }
}

====================
FILE: SecurityConfig.java

package com.jakubbone.config;

import com.jakubbone.utils.KeycloakRoleConverter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;
import org.springframework.security.web.SecurityFilterChain;

/**
 * Security configuration enabling JWT filter and method security.
 * All requests are permitted here; method-level annotations enforce roles.
 */
@Configuration
@EnableWebSecurity
@EnableMethodSecurity(prePostEnabled = true)
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        // Stateless REST API using JWT tokens only (no cookies/session)
        // CSRF protection is not needed here
        // Disable it to avoid 403 code on POST/PUT/DELETE
        http.csrf().disable()
                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                .and()
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers(("/api/v1/messages")).hasAnyRole("USER", "ADMIN")
                        .requestMatchers( "/api/v1/info", "/api/v1/uptime").permitAll()
                        .anyRequest().authenticated()
                )
                .oauth2ResourceServer(oauth2 -> oauth2
                        .jwt(jwt -> jwt.jwtAuthenticationConverter(jwtAuthenticationConverter()))
                );
        return http.build();
    }

    @Bean
    public JwtAuthenticationConverter jwtAuthenticationConverter() {
        JwtAuthenticationConverter converter = new JwtAuthenticationConverter();
        converter.setJwtGrantedAuthoritiesConverter(new KeycloakRoleConverter());
        return converter;
    }
}

====================
FILE: InfoController.java

package com.jakubbone.controller;

import org.springframework.beans.factory.annotation.Value;

import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.lang.management.ManagementFactory;
import java.util.Collections;
import java.util.Map;

@RestController
@RequestMapping("/api/v1")
public class InfoController {
    @Value("${spring.application.version}")
    private String version;

    @GetMapping("/info")
    public Map<String, String> getVersion(){
        return Collections.singletonMap("version", version);
    }

    @GetMapping("/uptime")
    public Map<String, Long> getUptime(){
        long uptimeInMillis = ManagementFactory.getRuntimeMXBean().getUptime();
        long uptimeInSeconds = uptimeInMillis / 1000;
        return Collections.singletonMap("uptime", uptimeInSeconds);
    }

    @GetMapping("/roles")
    public Object debugRoles(Authentication authentication) {
        return authentication.getAuthorities();
    }
}

====================
FILE: MessageController.java

package com.jakubbone.controller;

import com.jakubbone.dto.SendMessageRequest;
import com.jakubbone.model.Message;
import com.jakubbone.repository.MessageRepository;
import com.jakubbone.service.MessageService;
import com.jakubbone.utils.ResponseHandler;
import jakarta.validation.Valid;
import org.springframework.security.core.Authentication;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationToken;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;


import java.util.Map;

@RestController
@RequestMapping("/api/v1/messages")
public class MessageController {
    private final MessageService messageService;
    private final MessageRepository messageRepository;

    public MessageController(MessageService messageService, MessageRepository messageRepository) {
        this.messageService = messageService;
        this.messageRepository = messageRepository;
    }


    @PostMapping
    public ResponseEntity<Map<String, Object>> sendMessage(@Valid @RequestBody SendMessageRequest req, Authentication authentication){
        JwtAuthenticationToken jwt = (JwtAuthenticationToken) authentication;
        String sender = jwt.getToken().getClaim("preferred_username");

        Message savedMessage = messageService.sendMessage(sender, req.getTo(), req.getText());
        return ResponseHandler.success(HttpStatus.CREATED, savedMessage);
    }

    @PatchMapping("/{id}/read")
    @Transactional
    public ResponseEntity<Void> markMessageAsRead(@PathVariable Long id) {
        Message msg = messageRepository.findById(id).
                orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Message not found"));

        if(!msg.isRead()){
            msg.setRead(true);
        }
        return ResponseEntity.noContent().build();
    }



}

====================
FILE: SendMessageRequest.java

package com.jakubbone.dto;

import jakarta.validation.constraints.NotBlank;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor // @NoArgsConstructor - Jackson requires no args constructor to create JSON request
public class SendMessageRequest {
    @NotBlank(message = "Recipient username cannot be blank")
    private String to;

    @NotBlank(message = "Message text cannot be blank")
    private String text;

}

====================
FILE: GlobalExceptionHandler.java

package com.jakubbone.exception;

import com.jakubbone.utils.ResponseHandler;
import io.jsonwebtoken.JwtException;
import lombok.extern.log4j.Log4j2;
import org.springframework.dao.DataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.server.ResponseStatusException;

import java.util.Map;

@ControllerAdvice
// or @RestControllerAdvice -> acts as @ControllerAdvice + @ResponseBody for all methods
@Log4j2
public class GlobalExceptionHandler {

    // Handles JWT-related exceptions (e.g. invalid or expired token)
    // HTTP Status: 401 Unauthorized
    @ExceptionHandler(JwtException.class)
    public ResponseEntity<Map<String,Object>> handleJwtException(JwtException e){
        log.error("JWT error occurred: {}", e.getMessage());
        return ResponseHandler.error(HttpStatus.UNAUTHORIZED, "Invalid JWT token");
    }

    // Handles invalid method arguments (e.g. illegal or unexpected input)
    // HTTP Status: 400 Bad Request
    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<Map<String,Object>> handleIllegalArgumentException(IllegalArgumentException e){
        log.error("Illegal argument exception: {}", e.getMessage());
        return ResponseHandler.error(HttpStatus.BAD_REQUEST, "Invalid argument: " + e.getMessage());
    }

    // Handles ResponseStatusException (thrown manually with a custom HTTP status)
    // HTTP Status: Defined by exception (dynamic)
    @ExceptionHandler(ResponseStatusException.class)
    public ResponseEntity<Map<String,Object>> handleResponseStatusException(ResponseStatusException e){
        log.warn("Invalid argument provided: {}", e.getMessage());
        return ResponseHandler.error(e.getStatusCode(),  e.getReason());
    }

    // Handles database-related exceptions
    // HTTP Status: 500 Internal Server Error
    @ExceptionHandler(DataAccessException.class)
    public ResponseEntity<?> handleDataAccessException(DataAccessException e) {
        log.error("Database error occurred: {}", e.getMessage());
        return ResponseHandler.error(HttpStatus.INTERNAL_SERVER_ERROR, "Internal server error");
    }

    // Handles case when user is not found in the system (e.g. during authentication)
    // HTTP Status: 404 Not Found
    @ExceptionHandler(UsernameNotFoundException.class)
    public ResponseEntity<Map<String,Object>> handleUserNotFound(UsernameNotFoundException e) {
        log.error("User not found: {}", e.getMessage());
        return ResponseHandler.error(HttpStatus.NOT_FOUND, "User not found");
    }

    // Handles validation errors for incoming request data (e.g. @Valid fails)
    // HTTP Status: 400 Bad Request
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<Map<String,Object>> handleValidationException(MethodArgumentNotValidException e) {
        log.error("Invalid request data: {}", e.getMessage());
        return ResponseHandler.error(HttpStatus.BAD_REQUEST, "Invalid request data");
    }

    // Catches any other unhandled exceptions (generic)
    // HTTP Status: 500 Internal Server Error
    @ExceptionHandler(Exception.class)
    public ResponseEntity<Map<String,Object>> handleGenericException(Exception e) {
        log.error("Unexpected error occurred: {}", e.getMessage());
        return ResponseHandler.error(HttpStatus.INTERNAL_SERVER_ERROR, "Unexpected error occurred");
    }
}

====================
FILE: Message.java

package com.jakubbone.model;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;

import java.time.LocalDateTime;

@Entity
@Table(name = "messages")
@Getter
@Setter
@NoArgsConstructor
public class Message {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    @Column(name = "sender_id", nullable = false)
    private String senderUsername;

    @Column(name = "recipient_id", nullable = false)
    private String recipientUsername;

    @Column(nullable = false)
    private String content;

    @CreationTimestamp
    @Column(nullable = false)
    private LocalDateTime timestamp;

    private boolean isRead = false;

}

====================
FILE: User.java

package com.jakubbone.model;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Entity
@Table(name = "users")
@Getter
@Setter
@NoArgsConstructor // JPA/Hibernate require to create object getting from DB
public class User {

    public enum Role { USER, ADMIN }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    @Column(nullable = false, unique = true)
    private String username;

    @Column(nullable = false)
    @Enumerated(EnumType.STRING) // Hibernate save as a String, not a number
    private Role role;

    @Column(nullable = true)
    private String provider;

    public User(String username, String role, String provider ) {
        this.username = username;
        this.role = Role.valueOf(role);
        this.provider = provider;
    }
}

====================
FILE: MessageRepository.java

package com.jakubbone.repository;

import com.jakubbone.model.Message;
import org.springframework.data.jpa.repository.JpaRepository;

// JPARepository provides the ready methods
// e.g. save(), findById(), findAll(), delete()
// for Message Entity with the key type Long
public interface MessageRepository extends JpaRepository<Message, Long> {

}

====================
FILE: KeycloakService.java

package com.jakubbone.service;

import lombok.Getter;
import org.keycloak.admin.client.Keycloak;
import org.keycloak.representations.idm.UserRepresentation;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@Getter
public class KeycloakService {
    @Value("${keycloak.realm}")
    private String keycloakRealm;

    private final Keycloak keycloakAdminClient;

    public KeycloakService(Keycloak keycloakAdminClient) {
        this.keycloakAdminClient = keycloakAdminClient;
    }

    public boolean existsByUsername(String username) {
        List<UserRepresentation> users = keycloakAdminClient.realm(keycloakRealm).users().search(username);
        return users != null && users.stream().anyMatch(u -> username.equals(u.getUsername()));
    }


}

====================
FILE: MessageService.java

package com.jakubbone.service;

import com.jakubbone.model.Message;
import com.jakubbone.repository.MessageRepository;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import java.time.LocalDateTime;

@Service
public class MessageService {
    private final MessageRepository messageRepository;
    private final KeycloakService keycloakUserService;

    public MessageService(MessageRepository messageRepository, KeycloakService keycloakUserService) {
        this.messageRepository = messageRepository;
        this.keycloakUserService = keycloakUserService;
    }

    public Message sendMessage(String fromUsername, String toUsername, String content) {
        if (!keycloakUserService.existsByUsername(toUsername)) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Recipient " + toUsername + " not found");
        }

        Message msg = new Message();
        msg.setSenderUsername(fromUsername);
        msg.setRecipientUsername(toUsername);
        msg.setContent(content);
        msg.setTimestamp(LocalDateTime.now());

        return messageRepository.save(msg);
    }
}

====================
FILE: SpringBootMailingApplication.java

package com.jakubbone;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SpringBootMailingApplication {
	public static void main(String[] args) {
		SpringApplication.run(SpringBootMailingApplication.class, args);
	}
}

====================
FILE: KeycloakRoleConverter.java

package com.jakubbone.utils;

import org.springframework.core.convert.converter.Converter;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.oauth2.jwt.Jwt;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class KeycloakRoleConverter implements Converter<Jwt, Collection<GrantedAuthority>> {
    @Override
    public Collection<GrantedAuthority> convert(Jwt jwt) {
        Map<String, Object> realmAccess = (Map<String, Object>) jwt.getClaims().get("realm_access");
        if (realmAccess == null || realmAccess.isEmpty()) {
            return Collections.emptyList();
        }
        List<String> roles = (List<String>) realmAccess.get("roles");
        if (roles == null) return Collections.emptyList();

        return roles.stream()
                .map(role -> "ROLE_" + role)
                .map(SimpleGrantedAuthority::new)
                .collect(Collectors.toList());
    }
}

====================
FILE: ResponseHandler.java

package com.jakubbone.utils;

import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;

import java.time.Instant;
import java.util.Map;

public class ResponseHandler {

    // envelope for status OK (200)
    public static ResponseEntity<Map<String,Object>> success(Object data) {
        Map<String,Object> body = Map.of(
                "timestamp", Instant.now().toString(),
                "statusCode", HttpStatus.OK.value(),
                "data", data
        );
        return ResponseEntity.ok(body);
    }

    // envelope for another status (e.g. CREATED)
    public static ResponseEntity<Map<String,Object>> success(HttpStatus status, Object data) {
        Map<String,Object> body = Map.of(
                "timestamp", Instant.now().toString(),
                "statusCode",    status.value(),
                "status",    status.getReasonPhrase(),
                "data",      data
        );
        return ResponseEntity.status(status).body(body);
    }

    // envelope for error (HttpStatus)
    public static ResponseEntity<Map<String,Object>> error(HttpStatus status, String message) {
        Map<String,Object> body = Map.of(
                "timestamp", Instant.now().toString(),
                "errorCode", status.value(),
                "error", status.getReasonPhrase(),
                "message", message
        );
        return ResponseEntity.status(status).body(body);
    }

    // envelope for error (HttpStatusCode)
    public static ResponseEntity<Map<String, Object>> error(HttpStatusCode statusCode, String message) {
        Map<String,Object> body = Map.of(
                "timestamp", Instant.now().toString(),
                "errorCode", statusCode.value(),
                "message", message
        );
        return ResponseEntity.status(statusCode).body(body);
    }
}

====================
FILE: InfoControllerTest.java

package com.jakubbone.integration;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import static org.hamcrest.Matchers.greaterThanOrEqualTo;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;

@ActiveProfiles("test")
@SpringBootTest
@AutoConfigureMockMvc
class InfoControllerTest {
	@Test
	void shouldReturnApplicationVersion(@Autowired MockMvc mockMvc) throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.get("/api/v1/info"))
				.andDo(MockMvcResultHandlers.print())
				.andExpect(MockMvcResultMatchers.status().isOk())
				.andExpect(MockMvcResultMatchers.content().contentType(
						"application/json"))
				.andExpect(jsonPath("$.version").isString());
	}

	@Test
	void shouldReturnApplicationUptime(@Autowired MockMvc mockMvc) throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.get("/api/v1/uptime"))
				.andDo(MockMvcResultHandlers.print())
				.andExpect(MockMvcResultMatchers.status().isOk())
				.andExpect(MockMvcResultMatchers.content().contentType(
						"application/json"))
				.andExpect(jsonPath("$.uptime").isNumber())
				.andExpect(jsonPath("$.uptime", greaterThanOrEqualTo(0)));
	}
}

====================
FILE: MessageControllerTest.java

package com.jakubbone.integration;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.jakubbone.dto.SendMessageRequest;
import com.jakubbone.model.User;
import com.jakubbone.repository.MessageRepository;
import com.jakubbone.repository.UserRepository;
import com.jakubbone.security.JwtTokenProvider;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;


@ActiveProfiles("test")
@SpringBootTest
@AutoConfigureMockMvc
class MessageControllerTest {
    @Autowired
    ObjectMapper mapper;

    @Autowired
    UserRepository userRepository;

    @Autowired
    MessageRepository messageRepository;

    @Autowired
    JwtTokenProvider jwtTokenProvider;

    String adminToken;
    String userToken;

    @BeforeEach
    void setup() {
        messageRepository.deleteAll();
        userRepository.deleteAll();
        User testUser = new User("testUser", "USER", "LOCAL");
        User testAdmin = new User("testAdmin", "ADMIN", "GITHUB");
        userRepository.save(testUser);
        userRepository.save(testAdmin);
        userToken = jwtTokenProvider.createToken(testUser.getUsername(), String.valueOf(testUser.getRole()));
        adminToken = jwtTokenProvider.createToken(testAdmin.getUsername(), String.valueOf(testAdmin.getRole()));
    }

    @Test
    void shouldReturn201_whenAdminValidToken(@Autowired MockMvc mockMvc) throws Exception {
        SendMessageRequest req = new SendMessageRequest("testUser", "Hello user!");
        mockMvc.perform(post("/api/v1/messages")
                        .header(HttpHeaders.AUTHORIZATION, "Bearer " + adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(mapper.writeValueAsBytes(req)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.data.id").exists())
                .andExpect(jsonPath("$.data.sender.username").value("testAdmin"))
                .andExpect(jsonPath("$.data.recipient.username").value("testUser"))
                .andExpect(jsonPath("$.data.content").value("Hello user!"));
    }


    @Test
    void shouldReturn401_whenUserValidToken(@Autowired MockMvc mockMvc) throws Exception {
        SendMessageRequest req = new SendMessageRequest("testAdmin", "Hello admin!");
        mockMvc.perform(post("/api/v1/messages")
                        .header(HttpHeaders.AUTHORIZATION, "Bearer " + userToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(mapper.writeValueAsBytes(req)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.data.id").exists())
                .andExpect(jsonPath("$.data.sender.username").value("testUser"))
                .andExpect(jsonPath("$.data.recipient.username").value("testAdmin"))
                .andExpect(jsonPath("$.data.content").value("Hello admin!"));

    }

    @Test
    void shouldReturn404_whenRecipientNotFound(@Autowired MockMvc mockMvc) throws Exception {
        SendMessageRequest req = new SendMessageRequest("unknown", "Hello unknown!");

        mockMvc.perform(post("/api/v1/messages")
                    .header(HttpHeaders.AUTHORIZATION, "Bearer " + adminToken)
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(mapper.writeValueAsBytes(req)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isNotFound());
    }

    @Test
    void shouldReturn404_whenNoContent(@Autowired MockMvc mockMvc) throws Exception {
        SendMessageRequest req = new SendMessageRequest("testUser", "");

        mockMvc.perform(post("/api/v1/messages")
                    .header(HttpHeaders.AUTHORIZATION, "Bearer " + adminToken)
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(mapper.writeValueAsBytes(req)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isBadRequest());
    }
}

